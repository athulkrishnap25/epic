import React, { useState, useCallback } from 'react';
import { Routes, Route } from 'react-router-dom';

// Layout Component
import Layout from './components/Layout';

// Page Components
import HomePage from './pages/HomePage';
import PropertyDetailsPage from './pages/PropertyDetailsPage';
import LoginPage from './pages/LoginPage';
import SignupPage from './pages/SignupPage';
import ForgotPasswordPage from './pages/ForgotPasswordPage';
import FavoritesPage from './pages/FavoritesPage';

// Admin Components (Optional - uncomment if needed)
// import AdminLoginPage from './pages/AdminLoginPage';
// import AdminDashboard from './pages/AdminDashboard';
// import ProtectedAdminRoute from './components/ProtectedAdminRoute';

// 404 Page (Optional - uncomment if needed)
// import NotFoundPage from './pages/NotFoundPage';

function App() {
  // --- State and Handler for Navbar Search ---
  // Holds the filter object generated by the navbar search or logo click
  const [navSearchFilters, setNavSearchFilters] = useState({});

  // Function passed down to Navbar to handle search term input or clearing (via logo click)
  // Wrapped in useCallback to stabilize the function reference
  const handleNavSearch = useCallback((term) => {
    console.log("Navbar search/clear triggered in App.jsx:", term);
    // If a search term is provided, create a filter object with the keyword.
    // If the term is empty (logo click or empty search), set an empty filter object.
    setNavSearchFilters(term ? { keyword: term } : {});
  }, []); // Empty dependency array: function reference is stable across renders

  // Function specifically for HomePage to call when its detailed filters are used,
  // ensuring the navbar filter state in App.jsx is cleared.
  // Wrapped in useCallback for stability.
  const clearNavFiltersCallback = useCallback(() => {
    // Check if navSearchFilters actually needs clearing before setting state
    if (Object.keys(navSearchFilters).length > 0) {
      console.log("Clearing nav filters from App.jsx");
      setNavSearchFilters({});
    }
  }, [navSearchFilters]); // Re-memoize only if navSearchFilters changes

  return (
    <Routes>
      {/* Main application routes that use the Layout (Navbar, CategoryNav, Footer) */}
      <Route
        path="/"
        // Pass the search handler down to the Layout component
        element={<Layout onSearch={handleNavSearch} />}
      >
        {/* Index Route (HomePage) */}
        <Route
          index // Renders when the path is exactly "/"
          element={
            <HomePage
              // Pass the current navbar filters down as initialFilters
              initialFilters={navSearchFilters}
              // Pass the function for HomePage to call when its detailed filters are used
              clearNavFilters={clearNavFiltersCallback}
            />
          }
        />
        {/* Route for individual property details page */}
        <Route path="property/:propertyId" element={<PropertyDetailsPage />} />

        {/* Route for the favorites page */}
        <Route path="favorites" element={<FavoritesPage />} />

        {/* You can add other pages that use the main Layout here */}
        {/* Example: <Route path="/about" element={<AboutPage />} /> */}

      </Route>

      {/* Standalone Authentication Routes (No Layout wrapper) */}
      <Route path="/login" element={<LoginPage />} />
      <Route path="/signup" element={<SignupPage />} />
      <Route path="/forgot-password" element={<ForgotPasswordPage />} />

      {/* Example Admin Routes (Uncomment and import components if needed) */}
      {/* These would typically be standalone or use a separate AdminLayout */}
      {/*
      <Route path="/admin/login" element={<AdminLoginPage />} />
      <Route
        path="/admin/dashboard"
        element={
          <ProtectedAdminRoute>
            <AdminDashboard />
          </ProtectedAdminRoute>
        }
      />
      */}

      {/* Optional: Catch-all 404 Not Found Route */}
      {/* <Route path="*" element={<NotFoundPage />} /> */}

    </Routes>
  );
}

export default App;